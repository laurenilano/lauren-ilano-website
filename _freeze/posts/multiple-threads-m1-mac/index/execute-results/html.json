{
  "hash": "9098961de5dc0ee82e0ec5fa8b9d8197",
  "result": {
    "markdown": "---\ntitle: \"Setting up OpenMP on Apple Silicon Mac\"\nauthor: \"Lauren Ilano\"\ndate: \"2024-01-29\"\ncategories: [mac]\ntoc: false\nimage: scout-comp.jpg\ntitle-block-banner: true\n---\n\n\nThis blog post is an example of two things:\n\n1. You don't know what you don't know, and\n2. Using a Mac does sometimes make things harder^[and yet, I will continue to stan and it will always be my preferred OS so plz don't try and change my mind.]\n\nI am used to just installing packages in R and having them just *work*. I honestly did not even pay much attention to the warning I would get when loading `fst`: \"OpenMP was not detected, using single threaded mode.\" It wasn't until someone pointed out that I was only using a single thread that I noticed something was wrong--or performance could've been improved if I had paid a bit more attention.\n\nI am not an expert on why the default mac version of the C-compiler does not support OpenMP. I did however get it to work on my M1 mac so I figured I would document the steps here and share. I am also writing this to my future self to help me through setting this up on future computers.\n\n**Setting Up OpenMP multi threads for data.table and fst()**\n\n1. In terminal, install xcode (if not already installed)\n\n::: {.cell}\n\n```{.bash .cell-code}\nxcode-select --install\n```\n:::\n\n\n2. In terminal, install homebrew (if not already installed)\n\n::: {.cell}\n\n```{.bash .cell-code}\nbrew\nbrew install pkg-config\n```\n:::\n\n\n3. In terminal, using homebrew install openMP library and other dependencies\n\n::: {.cell}\n\n```{.bash .cell-code}\nbrew install llvm libomp gcc\n```\n:::\n\n\n4. In terminal, create a directory  called `.R` and within this directory, create a file called `Makevars`\n\n::: {.cell}\n\n```{.bash .cell-code}\nmkdir ~/.R\ntouch ~/.R/Makevars\n```\n:::\n\n\n5. Edit the Makevars file. Can do this in RStudio by navigating to in the Files pane: Home > .R > Makevars. Open and edit the file as you would an .Reviron file. Type the following in the file and save.\n\n::: {.cell}\n\n```{.text .cell-code}\nLDFLAGS += -L/opt/homebrew/opt/libomp/lib -lomp\nCPPFLAGS += -I/opt/homebrew/opt/libomp/include -Xclang -fopenmp\n```\n:::\n\n\n![](screenshot.png)\n\n6. Back in the terminal, load R and install `data.table` from source and then quit. \n\n::: {.cell}\n\n```{.bash .cell-code}\n# In terminal\nR\ninstall.packages(\"data.table\", type = \"source\")\n\nquit() # quit R\n```\n:::\n\n\n7. Check to make sure `data.table` is using multiple threads in RStudio by restarting R and loading `data.table`\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.table)\ngetDTthreads() # check # of threads\n```\n:::\n\n\n8. Go to `~/.R/Makefile` and comment out CPPFLAGS line and add additional lines so that makefile looks like this:\n\n::: {.cell}\n\n```{.text .cell-code}\nLDFLAGS += -L/opt/homebrew/opt/libomp/lib -lomp\n# CPPFLAGS += -I/opt/homebrew/opt/libomp/include -Xclang -fopenmp\n\nCXX1X=/opt/homebrew/Cellar/gcc/13.1.0/bin/g++-13 -fopenmp # had to brew install gcc\nCXX98=/opt/homebrew/Cellar/gcc/13.1.0/bin/g++-13 -fopenmp\nCXX11=/opt/homebrew/Cellar/gcc/13.1.0/bin/g++-13 -fopenmp\nCXX14=/opt/homebrew/Cellar/gcc/13.1.0/bin/g++-13 -fopenmp\nCXX17=/opt/homebrew/Cellar/gcc/13.1.0/bin/g++-13 -fopenmp\n```\n:::\n\n\n![](screenshot1.png)\n\n9. If step 8 doesn't work, check to make sure the paths are correct for lines 4-8. To do this, you can go in terminal and make sure that the path exists using code below. The output should show 13.1.0.\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd /opt/homebrew/Cellar/gcc\nls\n```\n:::\n\n\n10. In the terminal, install fst and fstcore from source:\n\n::: {.cell}\n\n```{.bash .cell-code}\nR\ninstall.packages(\"fstcore\", type = \"source\")\ninstall.packages(\"fst\", type = \"source\")\nquit()\n```\n:::\n\n\n11. Go back to RStudio and restart R. Load fst and check threads:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(fst)\nthreads_fst()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}